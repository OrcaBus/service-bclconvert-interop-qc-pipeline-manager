{
  "Comment": "A description of my state machine",
  "StartAt": "Save inputs",
  "States": {
    "Save inputs": {
      "Type": "Pass",
      "Next": "Get workflow name and version from ssm parameters",
      "Assign": {
        "instrumentRunId": "{% $states.input.instrumentRunId %}",
        "primaryDataOutputUri": "{% $states.input.primaryDataOutputUri %}",
        "libraries": "{% $states.input.libraries %}"
      }
    },
    "Get workflow name and version from ssm parameters": {
      "Type": "Parallel",
      "Next": "Generate Workflow Run Name and Portal Run ID",
      "Branches": [
        {
          "StartAt": "Get Workflow Name",
          "States": {
            "Get Workflow Name": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__workflow_name_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "workflowName": "{% $states.result.Parameter.Value %}"
              }
            }
          }
        },
        {
          "StartAt": "Get Workflow Version",
          "States": {
            "Get Workflow Version": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__workflow_version_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "workflowVersion": "{% $states.result.Parameter.Value %}"
              }
            }
          }
        },
        {
          "StartAt": "Get Workflow Outputs Prefix",
          "States": {
            "Get Workflow Outputs Prefix": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__workflow_outputs_prefix_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "workflowOutputPrefix": "{% $states.result.Parameter.Value %}"
              }
            }
          }
        },
        {
          "StartAt": "Get Workflow Logs Prefix",
          "States": {
            "Get Workflow Logs Prefix": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__workflow_logs_prefix_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "workflowLogsPrefix": "{% $states.result.Parameter.Value %}"
              }
            }
          }
        },
        {
          "StartAt": "Payload Version",
          "States": {
            "Payload Version": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__get_payload_version_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "payloadVersion": "{% $states.result.Parameter.Value %}"
              }
            }
          }
        }
      ],
      "Assign": {
        "workflowName": "{% $states.result[0].workflowName %}",
        "workflowVersion": "{% $states.result[1].workflowVersion %}",
        "workflowOutputsPrefix": "{% $states.result[2].workflowOutputPrefix %}",
        "workflowLogsPrefix": "{% $states.result[3].workflowLogsPrefix %}",
        "payloadVersion": "{% $states.result[4].payloadVersion %}"
      }
    },
    "Generate Workflow Run Name and Portal Run ID": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__generate_workflow_run_name_and_portal_run_id_lambda_function_arn__}",
        "Payload": {
          "workflowName": "{% $workflowName %}",
          "workflowVersion": "{% $workflowVersion %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Generate BCLConvert InterOp QC Ready Event",
      "Assign": {
        "portalRunId": "{% $states.result.Payload.portalRunId %}",
        "workflowRunName": "{% $states.result.Payload.workflowRunName %}"
      }
    },
    "Generate BCLConvert InterOp QC Ready Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__bssh_fastq_copy_succeeded_to_bclconvert_interop_qc_ready_lambda_function_arn__}",
        "Payload": {
          "workflowName": "{% $workflowName %}",
          "workflowVersion": "{% $workflowVersion %}",
          "workflowRunName": "{% $workflowRunName %}",
          "payloadVersion": "{% $payloadVersion %}",
          "workflowOutputPrefix": "{% $workflowOutputsPrefix %}",
          "workflowLogsPrefix": "{% $workflowLogsPrefix %}",
          "portalRunId": "{% $portalRunId %}",
          "instrumentRunId": "{% $instrumentRunId %}",
          "primaryDataOutputUri": "{% $primaryDataOutputUri %}",
          "libraries": "{% $libraries %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Has new workflow manager been deployed",
      "Output": {
        "bclconvertInterOpQcEventDetail": "{% $states.result.Payload.bclconvertInterOpQcEventDetail %}"
      }
    },
    "Has new workflow manager been deployed": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Push BCLConvert InterOp QC Ready Event",
          "Condition": "{% /* ${__new_workflow_manager_is_deployed__} */ false %}",
          "Comment": "New workflow manager is deployed"
        }
      ],
      "Default": "Push BCLConvert InterOp QC Ready Event (Legacy)"
    },
    "Push BCLConvert InterOp QC Ready Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $states.input.bclconvertInterOpQcEventDetail %}",
            "DetailType": "${__workflow_run_state_change_event_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "End": true
    },
    "Push BCLConvert InterOp QC Ready Event (Legacy)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $states.input.bclconvertInterOpQcEventDetail ~>\n/* Renamed libraries to linkedLibraries using the transform method */\n| $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n/* Renamed workflowName and workflowVersion using the transform method */\n| $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | %}",
            "DetailType": "${__workflow_run_state_change_event_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
