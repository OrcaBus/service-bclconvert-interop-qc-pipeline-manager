{
  "Comment": "A description of my state machine",
  "StartAt": "Save inputs",
  "States": {
    "Save inputs": {
      "Type": "Pass",
      "Next": "Create named multiqc parquet files",
      "Assign": {
        "readyEventDetail": "{% $states.input %}"
      }
    },
    "Create named multiqc parquet files": {
      "Type": "Parallel",
      "Next": "Convert BCLConvert Ready Event to ICAv2 WES Event",
      "Branches": [
        {
          "StartAt": "Get fastqs in instrument run id",
          "States": {
            "Get fastqs in instrument run id": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": {
                "fastqIdList": "{% $states.result.Payload.fastqIdList %}"
              },
              "Arguments": {
                "FunctionName": "${__get_fastq_ids_in_instrument_run_id_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $readyEventDetail.payload.data.inputs.instrumentRunId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "For each fastq (batched)"
            },
            "For each fastq (batched)": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "DISTRIBUTED",
                  "ExecutionType": "STANDARD"
                },
                "StartAt": "Set vars fastq map (batched)",
                "States": {
                  "Set vars fastq map (batched)": {
                    "Type": "Pass",
                    "Next": "For each fastq",
                    "Assign": {
                      "itemCountMapIter": "{% $states.input.BatchInput.itemCount %}",
                      "fastqIdListMapIter": "{% $states.input.Items %}",
                      "cacheUriMapIter": "{% $states.input.BatchInput.cacheUri %}"
                    }
                  },
                  "For each fastq": {
                    "Type": "Map",
                    "ItemProcessor": {
                      "ProcessorConfig": {
                        "Mode": "INLINE"
                      },
                      "StartAt": "Set vars fastq map",
                      "States": {
                        "Set vars fastq map": {
                          "Type": "Pass",
                          "Next": "Jitter ecs task",
                          "Assign": {
                            "fastqIdMapIter": "{% $states.input.fastqId %}",
                            "outputUriMapIter": "{% $cacheUriMapIter & $states.input.fastqId & '/' & 'multiqc.parquet' %}"
                          }
                        },
                        "Jitter ecs task": {
                          "Type": "Wait",
                          "Seconds": "{% $round($random() * $itemCountMapIter ) + 1 %}",
                          "Next": "Convert s3 output uri to icav2 uri"
                        },
                        "Convert s3 output uri to icav2 uri": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Arguments": {
                            "FunctionName": "${__convert_s3_uri_to_icav2_uri_lambda_function_arn__}",
                            "Payload": {
                              "s3Uri": "{% $outputUriMapIter %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Next": "Get fastq object",
                          "Assign": {
                            "icav2UriMapIter": "{% $states.result.Payload.icav2Uri %}"
                          }
                        },
                        "Get fastq object": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::lambda:invoke",
                          "Arguments": {
                            "FunctionName": "${__get_fastq_object_from_fastq_id_lambda_function_arn__}",
                            "Payload": {
                              "fastqId": "{% $fastqIdMapIter %}"
                            }
                          },
                          "Retry": [
                            {
                              "ErrorEquals": [
                                "Lambda.ServiceException",
                                "Lambda.AWSLambdaException",
                                "Lambda.SdkClientException",
                                "Lambda.TooManyRequestsException"
                              ],
                              "IntervalSeconds": 1,
                              "MaxAttempts": 3,
                              "BackoffRate": 2,
                              "JitterStrategy": "FULL"
                            }
                          ],
                          "Output": {
                            "multiqcParquetUri": "{% $states.result.Payload.fastqObj.qc.sequaliReports.multiqcParquet.s3Uri %}",
                            "newSampleName": "{% $states.result.Payload.fastqObj.library.libraryId & '__' & 'L' & $string($states.result.Payload.fastqObj.lane) %}"
                          },
                          "Next": "Resample multiqc file and copy to cache uri"
                        },
                        "Resample multiqc file and copy to cache uri": {
                          "Type": "Task",
                          "Resource": "arn:aws:states:::ecs:runTask",
                          "Arguments": {
                            "LaunchType": "FARGATE",
                            "Cluster": "${__resample_multiqc_parquet_file_cluster_arn__}",
                            "TaskDefinition": "${__resample_multiqc_parquet_file_definition_arn__}",
                            "NetworkConfiguration": {
                              "AwsvpcConfiguration": {
                                "Subnets": "{% $split('${__subnets__}', ',') %}",
                                "SecurityGroups": "{% [ '${__security_group__}' ] %}"
                              }
                            },
                            "Overrides": {
                              "ContainerOverrides": [
                                {
                                  "Name": "${__resample_multiqc_parquet_file_container_name__}",
                                  "Environment": [
                                    {
                                      "Name": "INPUT_URI",
                                      "Value": "{% $states.input.multiqcParquetUri %}"
                                    },
                                    {
                                      "Name": "OUTPUT_URI",
                                      "Value": "{% $icav2UriMapIter %}"
                                    },
                                    {
                                      "Name": "OLD_SAMPLE_NAME",
                                      "Value": "{% $fastqIdMapIter %}"
                                    },
                                    {
                                      "Name": "NEW_SAMPLE_NAME",
                                      "Value": "{% $states.input.newSampleName %}"
                                    }
                                  ]
                                }
                              ]
                            }
                          },
                          "End": true,
                          "Output": {
                            "outputUri": "{% $outputUriMapIter %}"
                          }
                        }
                      }
                    },
                    "End": true,
                    "Items": "{% $fastqIdListMapIter %}",
                    "ItemSelector": {
                      "fastqId": "{% $states.context.Map.Item.Value %}"
                    },
                    "Output": {
                      "outputUriList": "{% $states.result.(outputUri) %}"
                    }
                  }
                }
              },
              "End": true,
              "Label": "Foreachfastqbatched",
              "MaxConcurrency": 1000,
              "ItemBatcher": {
                "MaxItemsPerBatch": 10,
                "BatchInput": {
                  "itemCount": "{% $count($states.input.fastqIdList) %}",
                  "cacheUri": "{% $readyEventDetail.payload.data.engineParameters.cacheUri %}"
                }
              },
              "Items": "{% $states.input.fastqIdList %}",
              "Output": {
                "outputUriList": "{% $states.result.(outputUriList) ~> $reduce($append) %}"
              }
            }
          }
        },
        {
          "StartAt": "Placeholder (multiqc)",
          "States": {
            "Placeholder (multiqc)": {
              "Type": "Pass",
              "End": true,
              "Output": {}
            }
          }
        }
      ],
      "Assign": {
        "parquetFileUriList": "{% $states.result ~> $merge %}"
      }
    },
    "Convert BCLConvert Ready Event to ICAv2 WES Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__bclconvert_interopqc_ready_to_icav2_wes_request_lambda_function_arn__}",
        "Payload": {
          "readyEventDetail": "{% $readyEventDetail %}",
          "parquetFileUriList": "{% $parquetFileUriList %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Push WES Event",
      "Output": {
        "icav2WesRequestEventDetail": "{% $states.result.Payload.icav2WesRequestEventDetail %}"
      }
    },
    "Push WES Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $states.input.icav2WesRequestEventDetail %}",
            "DetailType": "${__icav2_wes_request_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
