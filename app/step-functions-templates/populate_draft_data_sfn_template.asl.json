{
  "Comment": "A description of my state machine",
  "StartAt": "Save inputs",
  "States": {
    "Save inputs": {
      "Type": "Pass",
      "Next": "Check payload valid",
      "Assign": {
        "draftDetail": "{% $states.input %}",
        "draftLibrariesList": "{% $states.input.libraries %}",
        "draftPayload": "{% (\n  $states.input.payload ? \n  $states.input.payload : {\n    \"version\": \"${__default_payload_version__}\"\n  }\n) %}",
        "draftData": "{% $states.input.payload.data ? $states.input.payload.data : {} %}",
        "draftEngineParameters": "{% $states.input.payload.data.engineParameters ? $states.input.payload.data.engineParameters : {} %}",
        "draftTags": "{% $states.input.payload.data.tags ? $states.input.payload.data.tags : {} %}",
        "draftInputs": "{% $states.input.payload.data.inputs ? $states.input.payload.data.inputs : {} %}"
      }
    },
    "Check payload valid": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Output": "{% $states.result.Payload %}",
      "Arguments": {
        "FunctionName": "${__validate_draft_data_complete_schema_lambda_function_arn__}",
        "Payload": "{% $draftData %}"
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Is payload complete"
    },
    "Is payload complete": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Nothing to do",
          "Condition": "{% $states.input.isValid %}"
        }
      ],
      "Default": "Get engine parameters"
    },
    "Nothing to do": {
      "Type": "Pass",
      "End": true
    },
    "Get engine parameters": {
      "Type": "Parallel",
      "Next": "Prime inputs",
      "Branches": [
        {
          "StartAt": "Has Project ID",
          "States": {
            "Has Project ID": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided project id",
                  "Condition": "{% $draftEngineParameters.projectId ? true : false %}",
                  "Comment": "Project ID Provided"
                }
              ],
              "Default": "Get Default Project Id"
            },
            "Use provided project id": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "projectId": "{% $draftEngineParameters.projectId %}"
              }
            },
            "Get Default Project Id": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__default_project_id_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "projectId": "{% $states.result.Parameter.Value %}"
              }
            }
          }
        },
        {
          "StartAt": "Has Pipeline ID",
          "States": {
            "Has Pipeline ID": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided pipeline id",
                  "Condition": "{% ($draftEngineParameters.pipelineId ? $draftEngineParameters.pipelineId : $draftDetail.workflow.executionEnginePipelineId ) ? true : false %}",
                  "Comment": "Pipeline ID Provided"
                }
              ],
              "Default": "Get default pipeline id"
            },
            "Use provided pipeline id": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "pipelineId": "{% $draftEngineParameters.pipelineId ? $draftEngineParameters.pipelineId : $draftDetail.workflow.executionEnginePipelineId %}"
              }
            },
            "Get default pipeline id": {
              "Type": "Task",
              "Arguments": {
                "Name": "{% '${__workflow_id_to_pipeline_id_ssm_parameter_path_prefix__}/' & $draftDetail.workflow.version %}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "pipelineId": "{% $states.result.Parameter.Value %}"
              }
            }
          }
        },
        {
          "StartAt": "Has Output URI",
          "States": {
            "Has Output URI": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided output uri",
                  "Condition": "{% $draftEngineParameters.outputUri ? true : false %}",
                  "Comment": "Output URI Provided"
                }
              ],
              "Default": "Get default output uri prefix"
            },
            "Use provided output uri": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "outputUri": "{% $draftEngineParameters.outputUri %}"
              }
            },
            "Get default output uri prefix": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__default_output_uri_prefix_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "outputUri": "{% $states.result.Parameter.Value & $draftDetail.portalRunId & '/' %}"
              }
            }
          }
        },
        {
          "StartAt": "Has Logs URI",
          "States": {
            "Has Logs URI": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided logs uri",
                  "Condition": "{% $draftEngineParameters.logsUri ? true : false %}",
                  "Comment": "Logs URI Provided"
                }
              ],
              "Default": "Get default logs uri prefix"
            },
            "Use provided logs uri": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "logsUri": "{% $draftEngineParameters.logsUri %}"
              }
            },
            "Get default logs uri prefix": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__default_logs_uri_prefix_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "logsUri": "{% $states.result.Parameter.Value & $draftDetail.portalRunId & '/' %}"
              }
            }
          }
        },
        {
          "StartAt": "Has Cache URI",
          "States": {
            "Has Cache URI": {
              "Type": "Choice",
              "Choices": [
                {
                  "Next": "Use provided cache uri",
                  "Condition": "{% $draftEngineParameters.cacheUri ? true : false %}",
                  "Comment": "Cache URI Provided"
                }
              ],
              "Default": "Get default cache uri prefix"
            },
            "Use provided cache uri": {
              "Type": "Pass",
              "End": true,
              "Output": {
                "cacheUri": "{% $draftEngineParameters.cacheUri %}"
              }
            },
            "Get default cache uri prefix": {
              "Type": "Task",
              "Arguments": {
                "Name": "${__default_cache_uri_prefix_ssm_parameter_name__}"
              },
              "Resource": "arn:aws:states:::aws-sdk:ssm:getParameter",
              "End": true,
              "Output": {
                "cacheUri": "{% $states.result.Parameter.Value & $draftDetail.portalRunId & '/' %}"
              }
            }
          }
        }
      ],
      "Assign": {
        "engineParameters": "{% /* https://try.jsonata.org/6nUH8BUBr */\n [ $draftEngineParameters, $merge($states.result) ] ~> $merge  %}"
      }
    },
    "Prime inputs": {
      "Type": "Parallel",
      "Next": "Generate BCLConvert InterOp QC Draft Data Event",
      "Branches": [
        {
          "StartAt": "Get Fastq IDs in Instrument Run ID",
          "States": {
            "Get Fastq IDs in Instrument Run ID": {
              "Type": "Task",
              "Resource": "arn:aws:states:::lambda:invoke",
              "Output": {
                "fastqIdList": "{% $states.result.Payload.fastqIdList %}"
              },
              "Arguments": {
                "FunctionName": "${__get_fastq_ids_in_instrument_run_id_lambda_function_arn__}",
                "Payload": {
                  "instrumentRunId": "{% $draftInputs.instrumentRunId %}"
                }
              },
              "Retry": [
                {
                  "ErrorEquals": [
                    "Lambda.ServiceException",
                    "Lambda.AWSLambdaException",
                    "Lambda.SdkClientException",
                    "Lambda.TooManyRequestsException"
                  ],
                  "IntervalSeconds": 1,
                  "MaxAttempts": 3,
                  "BackoffRate": 2,
                  "JitterStrategy": "FULL"
                }
              ],
              "Next": "Iterate over each fastq id (batched)"
            },
            "Iterate over each fastq id (batched)": {
              "Type": "Map",
              "ItemProcessor": {
                "ProcessorConfig": {
                  "Mode": "DISTRIBUTED",
                  "ExecutionType": "STANDARD"
                },
                "StartAt": "Jitter",
                "States": {
                  "Jitter": {
                    "Type": "Wait",
                    "Seconds": "{% $round($random() * $states.input.BatchInput.itemCount) + 1 %}",
                    "Next": "Fastq Sync (wait for qc to complete)"
                  },
                  "Fastq Sync (wait for qc to complete)": {
                    "Type": "Task",
                    "Resource": "arn:aws:states:::events:putEvents.waitForTaskToken",
                    "Arguments": {
                      "Entries": [
                        {
                          "Detail": {
                            "taskToken": "{% $states.context.Task.Token %}",
                            "payload": {
                              "fastqIdList": "{% $states.input.Items %}",
                              "requirements": {
                                "hasQc": true
                              },
                              "forceUnarchiving": false
                            }
                          },
                          "DetailType": "${__fastq_sync_detail_type__}",
                          "EventBusName": "${__event_bus_name__}",
                          "Source": "${__stack_source__}"
                        }
                      ]
                    },
                    "End": true
                  }
                }
              },
              "Label": "Iterateovereachfastqidbatched",
              "MaxConcurrency": 1000,
              "End": true,
              "ItemBatcher": {
                "MaxItemsPerBatch": 10,
                "BatchInput": {
                  "itemCount": "{% $count($states.input.fastqIdList) %}"
                }
              },
              "Items": "{% $states.input.fastqIdList %}"
            }
          }
        },
        {
          "StartAt": "Inputs Placeholder",
          "States": {
            "Inputs Placeholder": {
              "Type": "Pass",
              "End": true
            }
          }
        }
      ]
    },
    "Generate BCLConvert InterOp QC Draft Data Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::lambda:invoke",
      "Arguments": {
        "FunctionName": "${__generate_bclconvert_interopqc_draft_data_event_lambda_function_arn__}",
        "Payload": {
          "portalRunId": "{% $portalRunId %}",
          "inputs": "{% $draftInputs %}",
          "tags": "{% $draftTags %}",
          "engineParameters": "{% $engineParameters %}"
        }
      },
      "Retry": [
        {
          "ErrorEquals": [
            "Lambda.ServiceException",
            "Lambda.AWSLambdaException",
            "Lambda.SdkClientException",
            "Lambda.TooManyRequestsException"
          ],
          "IntervalSeconds": 1,
          "MaxAttempts": 3,
          "BackoffRate": 2,
          "JitterStrategy": "FULL"
        }
      ],
      "Next": "Has new workflow manager been deployed",
      "Output": {
        "eventDetail": "{% $states.result.Payload.eventDetail %}"
      }
    },
    "Has new workflow manager been deployed": {
      "Type": "Choice",
      "Choices": [
        {
          "Next": "Push BCLConvert InterOp QC Draft Event",
          "Condition": "{% /* ${__new_workflow_manager_is_deployed__} */ false %}",
          "Comment": "New workflow manager is deployed"
        }
      ],
      "Default": "Push BCLConvert InterOp QC Ready Event (Legacy)"
    },
    "Push BCLConvert InterOp QC Draft Event": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $states.input.eventDetail %}",
            "DetailType": "${__workflow_run_update_event_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "End": true
    },
    "Push BCLConvert InterOp QC Ready Event (Legacy)": {
      "Type": "Task",
      "Resource": "arn:aws:states:::events:putEvents",
      "Arguments": {
        "Entries": [
          {
            "Detail": "{% $states.input.eventDetail ~>\n/* Renamed libraries to linkedLibraries using the transform method */\n| $ | {\"linkedLibraries\": libraries}, [\"libraries\"] | ~>\n/* Renamed workflowName and workflowVersion using the transform method */\n| $ | {\"workflowName\": workflow.name, \"workflowVersion\": workflow.version}, [\"workflow\"] | %}",
            "DetailType": "${__workflow_run_state_change_event_detail_type__}",
            "EventBusName": "${__event_bus_name__}",
            "Source": "${__event_source__}"
          }
        ]
      },
      "End": true
    }
  },
  "QueryLanguage": "JSONata"
}
